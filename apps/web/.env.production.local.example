# next start で読み込まれる環境変数

# Auth.js用のシークレットキー
# 生成方法: Linux/macOSの場合は `openssl rand -hex 32` を実行、
# または https://generate-secret.vercel.app/32 にアクセスして生成する。
AUTH_SECRET=

# Typetalk OAuth2認証情報
# これらの値はTypetalkの開発者設定ページから取得する。
# Typetalk OAuth2クライアントID
AUTH_TYPETALK_ID=
# Typetalk OAuth2クライアントシークレット
AUTH_TYPETALK_SECRET=

# バックエンドAPIのホストURL
# ローカル環境では、APIコンテナのURLを指定する。
# 本番環境では、実際のAPIサーバーのURLを指定する。
BACKEND_HOST=http://api:8080

# 許可する外部画像のホスト情報
# https://nextjs.org/docs/app/api-reference/components/image#remotepatterns
IMAGES_REMOTE_PATTERNS='[{ "protocol": "https", "hostname": "typetalk.com" },{ "protocol": "https", "hostname": "apps.nulab.com" }]'
# IMAGES_REMOTE_PATTERNS='[{ "protocol": "https", "hostname": "typetalk.com" },{ "protocol": "https", "hostname": "apps.nulab.com" }]'

# ログレベル
LOG_LEVEL=info

# ------------------------------

# サーバーアクションを呼び出すことができる、特に安全なオリジンドメインのリスト。Next.js は、サーバーアクションリクエストのオリジンとホストドメインを比較し、CSRF 攻撃を防ぐためにそれらが一致していることを確認します。指定されていない場合は、同じオリジンのみが許可されます。
# https://nextjs.org/docs/app/api-reference/config/next-config-js/serverActions#allowedorigins
# Next.js のビルド時に next.config.mjs で参照するため、 Lambda の環境変数に設定しても効かない
ALLOWED_ORIGINS=example.com,*.example.com,

# Auth.jsの設定
# Docker環境では、Auth.jsの設定で trustHost: true を設定するか、 AUTH_TRUST_HOST 環境変数をtrueに設定する。
# https://authjs.dev/getting-started/deployment#docker
AUTH_TRUST_HOST=true
# https://authjs.dev/getting-started/deployment#auth_url
AUTH_URL=http://localhost:3000/api/auth
